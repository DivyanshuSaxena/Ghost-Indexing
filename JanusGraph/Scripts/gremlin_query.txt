//Get year value
g.V(40964128).values('date').next().getYear()

//compare
g.V(4136).values('date').next().before(g.V(40964128).values('date').next())

//all vertices with num less than given value
g.V().hasLabel('dp').where(values('num').is(lte(7)))

//all vertices with date less than given value
g.V().hasLabel('dp').where(values('date').is(lte( df.parse('2018-09-13T08:42:50.011+0000') )))

//all vertices with date less than given value and group by year
g.V().hasLabel('dp').where(values('date').is(lte( df.parse('2018-09-13T08:42:50.011+0000') ))).group().by{it.values('date').next().getYear()}

//all vertices with date less than given value and group by year and length
g.V().hasLabel('dp', 'tp').where(values('date').is(lte( df.parse('2018-09-13T08:42:50.011+0000') ))).group().by{1000*(int)(it.values('len').next()/4) + it.values('date').next().getYear()}

//all vertices with date less than given value and group by year and length and label
g.V().hasLabel('dp', 'tp').where(values('date').is(lte( df.parse('2018-09-13T08:42:50.011+0000') ))).group().by{it.label() + (it.values('date').next().getYear()*10 + (int)(it.values('len').next()/4))}


g.V().hasLabel('dp').choose(values('date').next().before(df.parse('2018-09-13T08:42:50.011+0000')))

g.V().hasLabel('message').choose(values('date').lte(xxx)).group().by('year')

g.V().hasLabel('post', 'comment').where(values('date').is(lte( df.parse('2018-09-13T08:42:50.011+0000') ))).group().by{it.values('date').next().getYear()}


// group and subgroup
 g.V().group().by(label).by(group().by('name'))


Query1:

df = new java.text.SimpleDateFormat('yyyy-MM-dd')

g.V().hasLabel('post','comment')
	 .filter{it.get().value('creationDate') < df.parse(@1)}
	 .group().by{it.value('creationDate').getYear()}.by(
		 group().by(label).by(
			group().by{ if(it.value('length') > 160 ){ 160/4 }else{ it.value('length')/4 }  }
		 )
     )
// Possible Indexes: creationDate, length


Query2:

g.V().hasLabel('country').or(has('name','@country1'),has('name','@country2')).as('countryx').
     .in('is_located_in').hasLabel('person').as('personx')
     .in('has_creator').hasLabel('comment','post')
     .and(filter{it.get().value('creationDate') < df.parse(@1)}, filter{it.get().value('creationDate') > df.parse(@2)})
	 .as('messagex')
	 .out('has_tag').hasLabel('tag').as('tagx')
	 .select('personx','messagex','tagx','countryx')
	 .group().by{it['country'].value('name')}
		.by(group().by{it['messagex'].value('creationDate').getMonth()}
			.by(group().by{it['personx'].value('gender')}.
				.by(group().by{Math.floor((it['personx'].value('birthday').getYear() - 2013)/5)}
					.by(group().by{it[''tagx].value('name')})
				)
			)
		)

// result selection and sort left
// Possible Indexes: country, creationDate


Query 3

//Computer year1,month1 and year2, month2 first

g.V().hasLabel('comment','post')
	 .filter{(it.get().value('creationDate').getYear() == '@year1' && it.get().value('creationDate').getMonth == '@month1')
			|| (it.get().value('creationDate').getYear() == '@year2' && it.get().value('creationDate').getMonth == '@month2')}
	 .as('messagex')
	 .out('has_tag').as('tagx')
	 .select('messagex','tagx')
	 .groupCount().by{it['messagex'].value('creationDate').getMonth().toString()+'-'+it['tagx'].value('name')}

// Possible Indexes: creationDate


Query 4

g.V().match(
		__.as('forumx').out('is_containter_of').as('postx'),
		__.as('forumx').out('has_moderator').out('is_located_in').out('is_pasrt_of').as('countryx'),
		__.as('postx').out('has_tag').out('has_type').as('tagTypex')
	).where('tagTypex',eq('@tagType1'))
	.where('countryx',eq('@country1'))
	.select('forumx')

// Possible Indexes:


Query 5

g.V().hasLabel('country')
	 .has('name','@country1')
	 .in('is_part_of')
	 .in('is_located_in')
	 .hasLabel('person').as('personx')
	 .in('has_member').as('forumx')
	 .select('personx','forumx')
	 .groupCount().by{it['forum']}
	 .unfold()
	 .order().by{-it.getValue()}
	 .limit(100)
	 .map{it.get().getKey()}.as('popularForumx')
	 .out('has_member').as('personxx')
	 .in('has_creator')
	 .hasLabel('post')
	 .match(
		__.as('postxx').in('container_of').as('popularForumx')
	).select('personxx','popularForumx','postxx')
	.groupCount().bu{it['persony']}
	.unfold()

